#!/bin/sh

progname=${0##*/}

usage () {
    cat <<EOS
Usage: $progname PACKAGE [TASK [ARG]...]

Building Tasks:
  fetch    Download the source
  extract  Extract the source archive
  patch    Modify the source code
  config   Prepare the source code for building
  build    Build the source code
  test     Test the builds
  install  Install the builds

Utility Tasks:
  reg      Register the installed files
  del      Delete the registered files
  pack     Create a tarball containing the registered files
EOS
}

if [ $# -eq 0 ]; then
    usage >&2
    exit 2
fi

# Define the default tasks

_fetch () {
    if [ "$1" ]; then
        url="$1"
    else
        if [ "$archome" ]; then
            file=$(find "$archome" -name "$arcfile" | head -n1)
            [ "$file" ] && return
        fi

        url="$arcurl"

        if [ ! "$url" ]; then
            "$progname: $pkgname: arcurl missing"
            exit 2
        fi
    fi

    mkdir -p "$fetched_cachedir"
    if type wget > /dev/null; then
        cd "$fetched_cachedir" && wget -c -O "$arcfile" "$url"
    else
        cd "$fetched_cachedir" && { rm -f "$arcfile"; curl -LR -o "$arcfile" "$url"; }
    fi
}

_extract () {
    if [ "$1" ]; then
        file="$1"
    else
        file="$fetched_cachedir/$arcfile"
        if [ ! -e "$file" ]; then
            file=$(find "$archome" -name "$arcfile" | head -n1)
            if [ ! "$file" ]; then
                echo "$progname: $arcfile: not found" >&2
                exit 2
            fi
        fi
    fi

    tar -xaf "$file" -C "$workdir"
}

_patch () {
    :
}

_config () {
    ./configure --prefix="$prefix" "$@"
}

_build () {
    make "$@"
}

_test () {
    make check "$@"
}

_install () {
    make install "$@"
}

_reg () {
    if [ ! -e "$workdir/.install-done" ]; then
        echo "$progname: not installed yet" >&2
        return 2
    fi

    if [ -e "$regfile" -a ! "$target_force" ]; then
        echo "$progname: $regfile: already exists" >&2
        return 2
    fi

    cat "$recdir"/files | while read -r f; do
        [ "${f#/}" = "$f" ] && f="$prefix/$f"

        # Strip a binary
        if [ "$install_strip" ]; then
            if [ "$f%.o" != "$f" ]; then
                if file "$f" | grep -q 'not stripped'; then
                    strip -p "$f"
                fi
            fi
        fi

        # Gzip a man/info page
        if [ "$install_gzip" ]; then
            if [ \( "${f#*/man/}" != "$f" -o "${f#*/info/}" != "$f" \) -a "${f%.gz}" = "$f" ]; then
                if [ -L "$f" ]; then
                    linkto=$(readlink "$f")
                    rm -f "$f"
                    ln -sf "$linkto.gz" "$f".gz
                    f="$f.gz"
                elif [ -f "$f" ]; then
                    gzip -9nf "$f"
                    f="$f.gz"
                elif [ ! -e "$f" -a -e "$f.gz" ]; then
                    # Maybe invoked again, that should be accepted
                    echo "$progname: warning: $f: not found, regarded as $f.gz" >&2
                    f="$f.gz"
                fi
            fi
        fi

        # Create the registration file
        fn="${f#$prefix/}"
        if [ -L "$f" ]; then
            echo "L $fn"
        elif [ -f "$f" ]; then
            echo "$(md5sum "$f" | sed 's/ .*//') $fn"
        elif [ -d "$f" ]; then
            echo "D $fn"
        else
            echo "$progname: warning: $f: not found" >&2
        fi
    done > "$regfile"
}

_del () {
    if [ ! -e "$regfile" ]; then
        echo "$progname: $regfile: not found" >&2
        return 2
    fi

    sed -n '1!G;h;$p' "$regfile" | while read -r sum file; do
        [ "${file#/}" = "$file" ] && file=$prefix/$file
        case "$sum" in
        D)
            rmdir "$file"
            ;;
        L)
            rm "$file"
            ;;
        *)
            if type md5sum > /dev/null; then
                if echo "$sum $file" | md5sum -c --status; then
                    rm "$file"
                else
                    echo "$progname: warning: $file: checksum mismatch" >&2
                fi
            elif type md5 > /dev/null; then
                sum2=$(md5 < "$file")
                if [ "$sum" = "$sum2" ]; then
                    rm "$file"
                else
                    echo "$progname: warning: $file: checksum mismatch" >&2
                fi
            fi
            ;;
        esac
    done
    rm -f "$regfile"
}

_pack () {
    if [ ! -e "$regfile" ]; then
        echo "$progname: $regfile: not found" >&2
        return 2
    fi

    for s in "$@"; do
        if [ "$s" = -n ]; then
            ownerargs='--numeric-owner --owner=:0 --group=:0'
        fi
    done

    sed 's/[^ ]* //' "$regfile" | tar -cf - -C "$prefix" --no-recursion -T- $ownerargs | gzip -9n > "$pkgname-$pkgver".tgz
}

# Define the utility functions

fr_avoid_rpath () {
    sed -i.orig \
        -e 's/\(runpath_var=\)\$.*/\1/' \
        -e 's/\(hardcode_libdir_flag_spec=\)\$.*/\1/' \
        "$@"
}

# Echo and invoke the given command line
fr_do () {
    echo "$@"
    eval "$@"
}

# Setup

if [ "$SUDO_USER" ]; then
    homedir="$(eval echo ~"$SUDO_USER")"
else
    homedir="$HOME"
fi

[ -e "$homedir"/.farirc ] && . "$homedir"/.farirc

: "${workdir:=$PWD/x}"
: "${cachedir:=${XDG_CACHE_HOME:-$HOME/.cache}/fari}"
fetched_cachedir="$cachedir"/fetched
: "${prefix:=/usr/local}"
: "${regdir:=$prefix/var/lib/fari}"

[ "$TMPDIR" ] && mkdir -p "$TMPDIR"

# Parse the arguments

recname="$1"
shift

if [ $# -ge 1 ]; then
    target="$1"
    shift
else
    target=build
fi

if [ "$target" != "${target#re}" ] && [ "$target" != reg ]; then
    target=${target#re}
    target_force=1
fi

# Read the recipe

if [ "${recname%%@*}" != "$recname" ]; then
    pkgverx="${recname#*@}"
    recname="${recname%%@*}"
    : "${recname:=.}"
fi

if [ "$recname" = . ]; then
    recdir="$PWD"
else
    recdir=$(find "$rechome" -name "$recname" | head -n1)
fi

if [ ! "$recdir" ]; then
    echo "$progname: $recname: no recipe" >&2
    exit 2
fi

recfile="$recdir"/recipe

arcext=tar.gz

. "$recfile"

[ "$pkgverx" ] && pkgver=$pkgverx # Note $pkgver's in the recipe still remain old

: "${arcname:=$pkgname}"  # Archive basename
: "${srcname:=$arcname-$pkgver}"  # Extracted directory name
: "${arcfile:=$arcname-$pkgver.$arcext}"  # Archive file name
: "${arcurl:=$arcurlbase$arcfile}"  # Archive URL

: "${srcdir:=$workdir/$srcname}"
: "${blddir:=$srcdir}"

regfile="$regdir/$pkgname-$pkgver"

# Run the tasks

fr_log_task () {
    date +'FARI:START %Y-%m-%d %H:%M:%S'
    fr_start=$(date +%s)
    "$@"
    x=$?
    date +'FARI:END %Y-%m-%d %H:%M:%S'
    fr_end=$(date +%s)
    echo "FARI:TIME $((fr_end - fr_start))s"
    echo "FARI:EXIT $x"
    return $x
}

mkdir -p "$workdir"

case "$target" in
fetch|extract|patch|config|build|test|install)
    for task in fetch extract patch config build test install; do
        donefile="$workdir/.$task-done"

        if [ ! -e "$donefile" -o \( "$target_force" -a "$task" = "$target" \) ]; then
            case "$task" in
            fetch|extract)
                _"$task" "$@"
                xs=$?
                ;;
            patch)
                cd "$srcdir" && _"$task" "$@"
                xs=$?
                ;;
            *)
                if [ "$task" = install ]; then
                    for s in "$@"; do
                        if [ "$s" != "${s#DESTDIR=}" ]; then
                            DESTDIR=${s#DESTDIR=}
                        fi
                    done
                fi

                logfile="$workdir/$task-$(date +%Y%m%d%H%M%S).log"
                exec 4>&1
                xs=$({ { cd "$blddir" && fr_log_task _"$task" "$@"; echo $? 1>&3; } 2>&1 | tee "$logfile" 1>&4; } 3>&1)
                exec 4>&-
                ;;
            esac
            [ "$xs" != 0 ] && exit "$xs"
        fi

        touch "$donefile"
        [ "$task" = "$target" ] && break
    done
    ;;
reg|del|pack)
    _"$target" "$@"
    ;;
*)
    if type _fr_"$target" > /dev/null; then
        _fr_"$target" "$@"
    else
        echo "$progname: $target: undefined task" >&2
        exit 2
    fi
    ;;
esac
